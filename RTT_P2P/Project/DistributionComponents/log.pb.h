/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.1 at Sat Jun 30 13:42:35 2018. */

#ifndef PB_LOG_PB_H_INCLUDED
#define PB_LOG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _ExceptionRecord {
    bool has_id;
    uint32_t id;
    bool has_time;
    uint32_t time;
    bool has_functionName;
    char functionName[16];
    bool has_line;
    uint32_t line;
    bool has_code;
    uint32_t code;
/* @@protoc_insertion_point(struct:ExceptionRecord) */
} ExceptionRecord;

typedef struct _LogRecord {
    pb_size_t exception_count;
    ExceptionRecord exception[32];
/* @@protoc_insertion_point(struct:LogRecord) */
} LogRecord;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ExceptionRecord_init_default             {false, 0, false, 0, false, "", false, 0, false, 0}
#define LogRecord_init_default                   {0, {ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default, ExceptionRecord_init_default}}
#define ExceptionRecord_init_zero                {false, 0, false, 0, false, "", false, 0, false, 0}
#define LogRecord_init_zero                      {0, {ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero, ExceptionRecord_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define ExceptionRecord_id_tag                   1
#define ExceptionRecord_time_tag                 2
#define ExceptionRecord_functionName_tag         3
#define ExceptionRecord_line_tag                 4
#define ExceptionRecord_code_tag                 5
#define LogRecord_exception_tag                  1

/* Struct field encoding specification for nanopb */
extern const pb_field_t ExceptionRecord_fields[6];
extern const pb_field_t LogRecord_fields[2];

/* Maximum encoded size of messages (where known) */
#define ExceptionRecord_size                     42
#define LogRecord_size                           1408

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define LOG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
