/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.1 at Sat Jul 14 10:53:44 2018. */

#ifndef PB_STATION_PB_H_INCLUDED
#define PB_STATION_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _connect_path {
    bool has_id;
    uint32_t id;
    bool has_remainderCapacity;
    uint32_t remainderCapacity;
    bool isUpdated;
/* @@protoc_insertion_point(struct:connect_path) */
} connect_path;

typedef struct _connect_switch {
    bool has_transferCode;
    uint32_t transferCode;
    pb_size_t path1_count;
    uint32_t path1[16];
    pb_size_t path2_count;
    uint32_t path2[16];
    bool has_count;
    uint32_t count;
    bool isConnect;
/* @@protoc_insertion_point(struct:connect_switch) */
} connect_switch;

typedef struct _distribution_power_area {
    pb_size_t areaSwitch_count;
    uint32_t areaSwitch[16];
    bool has_upadetedFlag;
    uint32_t upadetedFlag;
    bool isUpadeted;
    bool isFaultArea;
    bool isExitFaultMessage;
    bool has_upadetedFull;
    uint32_t upadetedFull;
    bool has_removalType;
    uint32_t removalType;
    bool has_insulateType;
    uint32_t insulateType;
/* @@protoc_insertion_point(struct:distribution_power_area) */
} distribution_power_area;

typedef struct _distribution_station {
    bool has_areaCount;
    uint32_t areaCount;
    bool isComplted;
    bool isGatherCompleted;
    bool isGatherCalculateCompleted;
    bool has_switchRef;
    uint32_t switchRef;
    bool isAlreayExitedFault;
    bool isExitedInsulateFailure;
/* @@protoc_insertion_point(struct:distribution_station) */
} distribution_station;

typedef struct _faultdeal_handle {
    bool has_switchPropertyID;
    uint32_t switchPropertyID;
    bool has_state;
    uint32_t state;
    bool has_lastState;
    uint32_t lastState;
    bool has_nextState;
    uint32_t nextState;
    bool isRun;
    bool has_step;
    uint32_t step;
    bool has_startTime;
    uint32_t startTime;
    bool has_limitTime;
    uint32_t limitTime;
    bool has_t1;
    uint32_t t1;
    bool has_t2;
    uint32_t t2;
    bool has_t3;
    uint32_t t3;
    bool has_t4;
    uint32_t t4;
    bool has_t5;
    uint32_t t5;
    bool has_checkOpenTime;
    uint32_t checkOpenTime;
    bool has_checkBackupTime;
    uint32_t checkBackupTime;
    bool has_rejectTime;
    uint32_t rejectTime;
    bool has_reciveRemovalSuccessTime;
    uint32_t reciveRemovalSuccessTime;
    bool has_reciveConnectTime;
    uint32_t reciveConnectTime;
    bool isCheckPass;
/* @@protoc_insertion_point(struct:faultdeal_handle) */
} faultdeal_handle;

typedef struct _node_property {
    bool has_id;
    uint32_t id;
    bool has_type;
    uint32_t type;
    bool has_state;
    uint32_t state;
    pb_size_t neighbourCollect_count;
    uint32_t neighbourCollect[16];
    bool has_operateType;
    uint32_t operateType;
    bool has_overTimeType;
    uint32_t overTimeType;
    bool has_removalType;
    uint32_t removalType;
    bool has_insulateType;
    uint32_t insulateType;
    bool has_faultState;
    uint32_t faultState;
    bool isFaultEdgeConnected;
    pb_size_t indexArea_count;
    uint32_t indexArea[2];
    pb_size_t isExitArea_count;
    bool isExitArea[2];
    pb_size_t isGather_count;
    bool isGather[2];
/* @@protoc_insertion_point(struct:node_property) */
} node_property;

typedef struct _StationMessage {
    pb_size_t idCollect_count;
    uint32_t idCollect[64];
    bool isGainComplted;
    bool has_node;
    node_property node;
    bool has_connect;
    connect_switch connect;
    bool has_con_path;
    connect_path con_path;
    pb_size_t power_area_count;
    distribution_power_area power_area[2];
    bool has_distribution;
    distribution_station distribution;
    bool has_fault_handle;
    faultdeal_handle fault_handle;
/* @@protoc_insertion_point(struct:StationMessage) */
} StationMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define node_property_init_default               {false, 0, false, 0, false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, false, 0, false, 0, false, 0, false, 0, 0, 0, {0, 0}, 0, {0, 0}, 0, {0, 0}}
#define connect_switch_init_default              {false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, 0}
#define connect_path_init_default                {false, 0, false, 0, 0}
#define distribution_power_area_init_default     {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, 0, 0, 0, false, 0, false, 0, false, 0}
#define distribution_station_init_default        {false, 0, 0, 0, 0, false, 0, 0, 0}
#define faultdeal_handle_init_default            {false, 0, false, 0, false, 0, false, 0, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, 0}
#define StationMessage_init_default              {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, false, node_property_init_default, false, connect_switch_init_default, false, connect_path_init_default, 0, {distribution_power_area_init_default, distribution_power_area_init_default}, false, distribution_station_init_default, false, faultdeal_handle_init_default}
#define node_property_init_zero                  {false, 0, false, 0, false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, false, 0, false, 0, false, 0, false, 0, 0, 0, {0, 0}, 0, {0, 0}, 0, {0, 0}}
#define connect_switch_init_zero                 {false, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, 0}
#define connect_path_init_zero                   {false, 0, false, 0, 0}
#define distribution_power_area_init_zero        {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, 0, 0, 0, false, 0, false, 0, false, 0}
#define distribution_station_init_zero           {false, 0, 0, 0, 0, false, 0, 0, 0}
#define faultdeal_handle_init_zero               {false, 0, false, 0, false, 0, false, 0, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, 0}
#define StationMessage_init_zero                 {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, false, node_property_init_zero, false, connect_switch_init_zero, false, connect_path_init_zero, 0, {distribution_power_area_init_zero, distribution_power_area_init_zero}, false, distribution_station_init_zero, false, faultdeal_handle_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define connect_path_id_tag                      1
#define connect_path_remainderCapacity_tag       2
#define connect_path_isUpdated_tag               3
#define connect_switch_transferCode_tag          1
#define connect_switch_path1_tag                 2
#define connect_switch_path2_tag                 3
#define connect_switch_count_tag                 4
#define connect_switch_isConnect_tag             5
#define distribution_power_area_areaSwitch_tag   1
#define distribution_power_area_upadetedFlag_tag 2
#define distribution_power_area_isUpadeted_tag   3
#define distribution_power_area_isFaultArea_tag  4
#define distribution_power_area_isExitFaultMessage_tag 5
#define distribution_power_area_upadetedFull_tag 6
#define distribution_power_area_removalType_tag  7
#define distribution_power_area_insulateType_tag 8
#define distribution_station_areaCount_tag       1
#define distribution_station_isComplted_tag      2
#define distribution_station_isGatherCompleted_tag 3
#define distribution_station_isGatherCalculateCompleted_tag 4
#define distribution_station_switchRef_tag       5
#define distribution_station_isAlreayExitedFault_tag 6
#define distribution_station_isExitedInsulateFailure_tag 7
#define faultdeal_handle_switchPropertyID_tag    1
#define faultdeal_handle_state_tag               2
#define faultdeal_handle_lastState_tag           3
#define faultdeal_handle_nextState_tag           4
#define faultdeal_handle_isRun_tag               5
#define faultdeal_handle_step_tag                6
#define faultdeal_handle_startTime_tag           7
#define faultdeal_handle_limitTime_tag           8
#define faultdeal_handle_t1_tag                  9
#define faultdeal_handle_t2_tag                  10
#define faultdeal_handle_t3_tag                  11
#define faultdeal_handle_t4_tag                  12
#define faultdeal_handle_t5_tag                  13
#define faultdeal_handle_checkOpenTime_tag       14
#define faultdeal_handle_checkBackupTime_tag     15
#define faultdeal_handle_rejectTime_tag          16
#define faultdeal_handle_reciveRemovalSuccessTime_tag 17
#define faultdeal_handle_reciveConnectTime_tag   18
#define faultdeal_handle_isCheckPass_tag         19
#define node_property_id_tag                     1
#define node_property_type_tag                   2
#define node_property_state_tag                  3
#define node_property_neighbourCollect_tag       5
#define node_property_operateType_tag            6
#define node_property_overTimeType_tag           7
#define node_property_removalType_tag            8
#define node_property_insulateType_tag           9
#define node_property_faultState_tag             10
#define node_property_isFaultEdgeConnected_tag   11
#define node_property_indexArea_tag              13
#define node_property_isExitArea_tag             14
#define node_property_isGather_tag               15
#define StationMessage_idCollect_tag             1
#define StationMessage_isGainComplted_tag        2
#define StationMessage_node_tag                  3
#define StationMessage_connect_tag               4
#define StationMessage_con_path_tag              5
#define StationMessage_power_area_tag            6
#define StationMessage_distribution_tag          7
#define StationMessage_fault_handle_tag          8

/* Struct field encoding specification for nanopb */
extern const pb_field_t node_property_fields[14];
extern const pb_field_t connect_switch_fields[6];
extern const pb_field_t connect_path_fields[4];
extern const pb_field_t distribution_power_area_fields[9];
extern const pb_field_t distribution_station_fields[8];
extern const pb_field_t faultdeal_handle_fields[20];
extern const pb_field_t StationMessage_fields[9];

/* Maximum encoded size of messages (where known) */
#define node_property_size                       166
#define connect_switch_size                      206
#define connect_path_size                        14
#define distribution_power_area_size             126
#define distribution_station_size                22
#define faultdeal_handle_size                    110
#define StationMessage_size                      1172

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define STATION_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
